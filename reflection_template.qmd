
---
title: "STAT 331 Portfolio"
author: "Alex Lung"
date: "12/8/2024"
format: 
  html: 
    self-contained: true
    theme: journal
    toc: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
code-fold: true
code-tools: true
---

[**Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_**B+**\_.

The work that I provided I believe is worthy of a **B+** as I was able to complete a large portion of the learning targets in a sufficient manner. I do believe I did well, but there are aspects that keep me from being any higher as there are some areas, such as not being well versed in using the joins as often as I should or not being more creative. This has improved however, especially in Lab 7 (DVS-3-3), as I was able to determine a style that I liked which wasn't the default. I have made more attempts at implementing them in a way that I am comfortable with and can produce the needed output, but I still try to simplify the code for my sake, showing I need to continue working on my confidence with these functions. The areas that I excelled would be working on my code through revisions, as I have done revisions on all of my works that have been given feedback, whether complete or incomplete. I want to show my willingness to improve through that and how I can improve because of it. 

I have also been, in my opinion, a good group mate, as I do my very best to contribute when needed, and to take a back seat and hear my partner out. In my opinion,during the times that I have worked with someone, it could have been considered "fun" working on the code.

Giving feedback is also an aspect that I am not perfect in as I initially misunderstood the assignment. But I continued to grow my ability to be constructive and understand how to point out the needed changes compared to subjective choices. I believe that I have improved my ability to give feedback that is both constructive and encouraging.

Overall, there are areas that I could improve on, but I have exercised the knowledge that I obtained to the best of my abilities in a way that I believe meet a majority of the learning objectives that are proposed. 

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

#Lab 2 | Question 1.

evaluations <- read.csv(
  here("data", 
       "teacher_evals.csv"))

#SuppressMessages was removed as compared to the original code in Lab 2 | Question 1. message:false would be used to achieve the same goal across the whole document. 

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

#Check-in 2.3 | Question 5.

agesxl <- read_xlsx(path = here::here("check-ins", 
                                      "2.1-loading-data", 
                                      "Ages_Data""ages.xlsx"), 
                    sheet = "ages")

```

-   `txt`

```{r}
#| label: wd-1-txt

#Check-in 2.3 | Question 4. 

ages_mystery <- read_delim(file = here::here("Week 2", 
                                             "Check-ins", 
                                             "Ages_Data", 
                                             "ages_mystery.txt"),
                           delim = "|")

```

**WD-2: I can select necessary columns from a dataset.**


```{r}
#| label: wd-2

#Lab 4 | Question 6


library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>

  
  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")



```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

*Difference in this code from the original was that I set the object to contain the code, along with adding a full_join() and filtering using the get_fit_now_memebr person id. I also added this data in an object for future use in the lab 5 assignment.*



```{r}
#| label: wd-3-numeric

#Lab 3 Challenge | Question 4

#| label: data-cleaning
# code chunk for Q4


#This code chunk will go through all of the variables that need to have their data
# type altered to better suit it for later tasks. 
teacher_evals_clean <- evaluations |>
  
  rename(sex = gender) |>
  
  filter(no_participants >= 10) |>
  
  mutate(
    teacher_id = as.character(teacher_id),
    no_participants = as.integer(no_participants),
    academic_degree = as.factor(academic_degree),
    seniority = as.numeric(seniority),
    sex = as.factor(sex)
  ) |>

  select(course_id, teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, sex)


```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

#Lab 5 |

##| label: initial-suspect
 
suspect <- drivers_license |> 

#Rename id in drivers id to prevent confusion.
  rename(drivers_id = id) |>

 #Join person's data to get name of people
  full_join(person,
             by = join_by(
               drivers_id == license_id
             )
            ) |>
    
  #Search for plates that have this pattern
  filter(str_detect(plate_number, "H42W")) |>
  
  
  filter(id %in% get_fit_now_member$person_id) 
  
suspect$name



#Murderer is Jeremy Bowers as described by the witnesses


```

-   factor

*For the factoring aspect, I added as.factor function as that would alter the type to be filtering for the "murder" factor, and so it was in place to show filtering of factors, although I heard characters are a similar area.*

```{r}
#| label: wd-3-factor

#Lab 5 |

#| label: inspecting-crime-scene-report

crime_scene_report |>
  
  mutate(date = ymd(date)) |>
  
  filter(date == mdy("January 15, 2018"), 
           city == "SQL City",
           type == as.factor("murder")
         ) |>
  
  select(description)

 

```

-   date (example must use functions from **lubridate**)


```{r}
#| label: wd-3-date

#Lab 5 | 

#| label: inspecting-crime-scene-report

crime_scene_report |>
  
  filter(weekdays(date) %in% "Monday",  # Only Mondays in 2018 
         year(date) == 2018,
         city == "SQL City",
         type == "murder") |>
  
  select(description) 

#Added more descriptive ways to narrow down the date, without just including the specific date

#Takes the year slot and and looks into specific aspects of it through lubricdate functions


```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

# Lab 3 Challenge

# code chunk for Q12

teacher_evals_compare <- evaluations |>
  mutate(norm_question_no = (question_no - 900)) |>
  filter(norm_question_no == 3) |>  
  mutate(
    SET_level = if_else(SET_score_avg >= 4, "excellent", "standard"), 
    sen_level = if_else(seniority <= 4, "junior", "senior")  
  ) |>
  select(course_id, SET_level, sen_level)  

#I inserted a new mutate function that looks to taking the question_no column and create a new colunm of the "real" question numbers

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

#Lab 4 | Question 3

#| label: recoding-county-to-census-regions

ca_childcare <- ca_childcare |> 
  
  mutate(county_name = str_remove(county_name, 
                                  " County")) |> #Remove "County" from the name.
  
  #This code is to set the county names to a specific region in California.
  mutate(Region = fct_collapse(.f = county_name,
                          
                               "Superior California" = c("Butte", 
                                                         "Colusa", 
                                                         "El Dorado", 
                                                         "Glenn", 
                                                         "Lassen", 
                                                         "Modoc", 
                                                         "Nevada", 
                                                         "Placer", 
                                                         "Plumas", 
                                                         "Sacramento", 
                                                         "Shasta", 
                                                         "Sierra", 
                                                         "Siskiyou", 
                                                         "Sutter", 
                                                         "Tehama", 
                                                         "Yolo", 
                                                         "Yuba"),
                               
                               "North Coast" = c("Del Norte", 
                                                 "Humboldt", 
                                                 "Lake", 
                                                 "Mendocino", 
                                                 "Napa", 
                                                 "Sonoma", 
                                                 "Trinity"),
                               
                               "San Francisco Bay Area" = c("Alameda", 
                                                            "Contra Costa", 
                                                            "Marin", 
                                                            "San Francisco",
                                                            "San Mateo", 
                                                            "Santa Clara", 
                                                            "Solano"),
                               
                               "Northern San Joaquin Valley" = c("Alpine", 
                                                                 "Amador", 
                                                                 "Calaveras", 
                                                                 "Madera", 
                                                                 "Mariposa", 
                                                                 "Merced", 
                                                                 "Mono", 
                                                                 "San Joaquin", 
                                                                 "Stanislaus", 
                                                                 "Tuolumne"),
                               
                               "Central Coast" = c("Monterey", 
                                                   "San Benito", 
                                                   "San Luis Obispo", 
                                                   "Santa Barbara", 
                                                   "Santa Cruz", 
                                                   "Ventura"),
                               
                               "Southern San Joaquin Valley" = c("Fresno", 
                                                                 "Inyo", 
                                                                 "Kern", 
                                                                 "Kings", 
                                                                 "Tulare"),
                               
                               "Inland Empire" = c("Riverside", 
                                                   "San Bernardino"),
                               
                               "Los Angeles County" = c("Los Angeles"),
                               
                               "Orange County" = c("Orange"),
                               
                               "San Diego-Imperial" = c("Imperial", 
                                                        "San Diego")
                               )
         )


```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

#Lab 4 | Question 3

#| label: recoding-county-to-census-regions

ca_childcare <- ca_childcare |> 
  
  mutate(county_name = str_remove(county_name, 
                                  " County")) |> #Remove "County" from the name.
  
  #This code is to set the county names to a specific region in California.
  mutate(Region = fct_collapse(.f = county_name,
                          
                               "Superior California" = c("Butte", 
                                                         "Colusa", 
                                                         "El Dorado", 
                                                         "Glenn", 
                                                         "Lassen", 
                                                         "Modoc", 
                                                         "Nevada", 
                                                         "Placer", 
                                                         "Plumas", 
                                                         "Sacramento", 
                                                         "Shasta", 
                                                         "Sierra", 
                                                         "Siskiyou", 
                                                         "Sutter", 
                                                         "Tehama", 
                                                         "Yolo", 
                                                         "Yuba"),
                               
                               "North Coast" = c("Del Norte", 
                                                 "Humboldt", 
                                                 "Lake", 
                                                 "Mendocino", 
                                                 "Napa", 
                                                 "Sonoma", 
                                                 "Trinity"),
                               
                               "San Francisco Bay Area" = c("Alameda", 
                                                            "Contra Costa", 
                                                            "Marin", 
                                                            "San Francisco",
                                                            "San Mateo", 
                                                            "Santa Clara", 
                                                            "Solano"),
                               
                               "Northern San Joaquin Valley" = c("Alpine", 
                                                                 "Amador", 
                                                                 "Calaveras", 
                                                                 "Madera", 
                                                                 "Mariposa", 
                                                                 "Merced", 
                                                                 "Mono", 
                                                                 "San Joaquin", 
                                                                 "Stanislaus", 
                                                                 "Tuolumne"),
                               
                               "Central Coast" = c("Monterey", 
                                                   "San Benito", 
                                                   "San Luis Obispo", 
                                                   "Santa Barbara", 
                                                   "Santa Cruz", 
                                                   "Ventura"),
                               
                               "Southern San Joaquin Valley" = c("Fresno", 
                                                                 "Inyo", 
                                                                 "Kern", 
                                                                 "Kings", 
                                                                 "Tulare"),
                               
                               "Inland Empire" = c("Riverside", 
                                                   "San Bernardino"),
                               
                               "Los Angeles County" = c("Los Angeles"),
                               
                               "Orange County" = c("Orange"),
                               
                               "San Diego-Imperial" = c("Imperial", 
                                                        "San Diego")
                               )
         )

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

#Lab 5 |

#| label: inspecting-crime-scene-report

crime_scene_report |>
  
  mutate(date = ymd(date),
         crime_day = day(date),
         crime_month = month(date)) |>

  filter(crime_day == 15,  
         crime_month == 1,
         city == "SQL City",
         type == "murder") |>
  
  select(description) 
 
#From the original code, I decided to create two new columns to break the date into parts such as day and month in this case.

#I decided to look at the specific day (the 15th), and Janurary (in this case 1).

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

#Lab 4 | Question 2

#| label: ca-childcare-costs

#We load in the counties dataset and the output of this code will be in ca_childcare.
ca_childcare <- counties |>

#We filter the dataset to only include counties within the state of California.
  filter(state_abbreviation == "CA") |>
  
#Use "left_join" function to link childcare_costs to counties dataset while keeping all the info in childcare_costs.
  left_join(childcare_costs, by = "county_fips_code")

```

-   `right_join()` 

```{r}
#| label: wd-5-right


#Lab 5 | 

#| label: inspecting-witnesses


#Two witnesses from footage.
#One lives at the last house on "Northwestern Dr".
#The other, Annabel, lives somewhere on "Franklin Ave".

#https://chatgpt.com/share/671c51b6-4170-8000-8487-5c4d9ce9f2ef
#https://stackoverflow.com/questions/6286313/remove-an-entire-column-from-a-data-frame-in-r

person |> 
  
  right_join(interview,
          by = join_by(
            id == person_id)
          ) |>
  
  filter(address_street_name == "Northwestern Dr" &
           address_number == max(address_number) | 
           (word(name) == "Annabel" &
            address_street_name == "Franklin Ave")
         ) |>

  
  select(transcript)

#Witnesses are Annabel Miller, ID: 16371 and Morty Schapiro, ID: 14887

#Shapiro saw a man run out with a "Get Fit Now" gym bag, number started with "48Z".
#These bags are only given to gold members and got in a car with a plate that included "H42W".

#Miller saw the murder happen and recognized the killer, who worked out last week on January 9th. 
```

-   `inner_join()`

```{r}
#| label: wd-5-inner

#Lab 5 | 

facebook_event_checkin |>
  
  #Change the date column to real "dates"
  mutate(date = ymd(date)) |>
  
  filter(event_name == "SQL Symphony Concert",
         month(date) == 12) |>
  
  group_by(person_id) |>
  
  summarise(num_of_concert_visits = n()) |>
  
  filter(num_of_concert_visits == "3") |>
  
  left_join(person,
            by = join_by(
              person_id == id)
            ) |>
  right_join(drivers_license,
         by = join_by(
           license_id == id)
         ) |>
  
  filter(hair_color == "red",
         car_model == "Model S",
         height >= "65" |
           height <= "67"
         ) |>
  
  inner_join(income,
             join_by(ssn)) |>
  
  left_join(interview,
             join_by(person_id)) |>

  select(name,
         annual_income,
         transcript)

```

-   `full_join()`

*Restructured the code from the original lab to be cleaner and place into an object, along with a full_join when joining drivers_license and person.*

```{r}
#| label: wd-5-full

# Lab 5 |

#| label: initial-suspect
 
witnesses_id <- c(16371, 14887)

suspect <- drivers_license |> 

  # Rename id in drivers id to prevent confusion
  rename(drivers_id = id) |>
  
  full_join(person,
             by = join_by(drivers_id == license_id)) |>
  
  # Remove witnesses using an anti_join
  anti_join(data.frame(drivers_id = witnesses_id), by = "drivers_id") |>
  
  # Drop useless inputs (ID's with no other information)
  drop_na() |>
  
  # Search for plates that have this pattern
  filter(str_detect(plate_number, "H42W")) |>
  
  # Filter to get only those who are in get_fit_now_member
  filter(id %in% get_fit_now_member$person_id) 

suspect$name



#Murderer is Jeremy Bowers as described by the witnesses


#I also added a drop_na() function to deal with the useless inputs (ID's with no other information), trimming the dataframe down as we go
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

# Lab 4 | Question 4

year_filter <- data.frame(study_year = c(2008, 2018))

ca_childcare |>
  semi_join(year_filter, 
            by = "study_year") |>  # Use semi_join to filter years
  
  group_by(Region, study_year) |> 
  
  # Take the median of household income for both years
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  
  arrange(median_income) |>
  
  pivot_wider(names_from = study_year, values_from = median_income) |>
  
  rename(Med_Income_2008 = "2008", Med_Income_2018 = "2018")

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

#Lab 5 |

#| label: initial-suspect
 
witnesses_id <- c(16371, 14887)

suspect <- drivers_license |> 

  # Rename id in drivers id to prevent confusion
  rename(drivers_id = id) |>
  
  full_join(person,
             by = join_by(drivers_id == license_id)) |>
  
  # Remove witnesses using an anti_join
  anti_join(data.frame(drivers_id = witnesses_id), by = "drivers_id") |>
  
  # Drop useless inputs (ID's with no other information)
  drop_na() |>
  
  # Search for plates that have this pattern
  filter(str_detect(plate_number, "H42W")) |>
  
  # Filter to get only those who are in get_fit_now_member
  filter(id %in% get_fit_now_member$person_id) 

suspect$name



#Murderer is Jeremy Bowers as described by the witnesses

#I included the anti_join function here as to remove the witnesses from the dataset as they did not seem to be able to contirbute anymoe in the suspect search. Removing them would be best for narrowing down the search.

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

#Lab 4 | Question 6


library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")


```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

#Lab 4 | Question 4

#| label: median-income-by-region-over-time

ca_childcare |>
  
  filter(study_year %in% c(2008, 
                           2018)
         ) |>             
  group_by(Region, 
           study_year) |> 
  
  #Take the median of household income from both years and compare them 
  summarize(median_income = median(mhi_2018, 
                                   na.rm = TRUE), 
            .groups = "drop") |>

  arrange(median_income) |>
  
  pivot_wider(names_from = study_year,                  
              values_from = median_income) |>
  
  rename(Med_Income_2008 = "2008",
         Med_Income_2018 = "2018") 

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Lab 2 (Revisions), Lab 3, Lab 4 (Revisions), Lab 5 (Revisions), Lab 3 Challenge, Lab 2 Challenge.

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

#Lab 4 | Question 6


library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
  
    facet_wrap(~ `Child_Age`) +
  
    geom_smooth(linewidth = 0.8) +
  
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")


```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

#Lab 4 | Question 6


library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")



```

-   Example of function formatting

```{r}
#| label: r-2-3


#Lab 3 | Question 9

#| label: question-1-high-low
# code chunk for Q9

#This code chunk will print out the list of professors that have the highest average 
#and lowest SET score for question 1 in ascending order. 

teacher_evals_clean |>
  
  filter(question_no == 901) |>
  
  group_by(teacher_id) |>
  
  summarize(avg_rating = mean(SET_score_avg)) |>
  
  filter(avg_rating == max(avg_rating) | avg_rating == min(avg_rating)) |>
  
  arrange(avg_rating) 

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

# Lab 4 | Question 5

#| label: lowest-median-weekly-price-2018
#| 
ca_childcare |>
  
  filter(study_year == 2018) |>   
  
  group_by(Region) |>        
  
  summarize(median_price_2018 = median(mc_infant,
                                       na.rm = TRUE)) |>  
  
  slice_min(median_price_2018) #Takes the first (lowest) value and places it by itself.
```

-   Example of function stops

```{r}
#| label: r-3-function-stops

# Lab 7 Challenge | Question 2

#| label: function-to-change-impossible-measurements-to-NA

replace_unlikely_values <- function(measurements, min_value, max_value) {
  
  
  #Determine if input values fit between the min and max values
  if(!is.numeric(measurements) || !is.numeric(min_value) || !is.numeric(max_value)) {
    stop("All inputs must be Numeric")
  }
                 
  case_when(measurements < min_value ~ NA_real_,
            measurements > max_value ~ NA_real_,
            .default = measurements)

  
}


```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

#Lab 4 | Question 7

library(scales) #Load in package to use label_dollar() function

ggplot(ca_childcare, 
       mapping = aes(x = mhi_2018, 
                     y = mc_infant)
       ) +
  
  geom_point() +
  
   geom_smooth(method = "lm", 
               color = "red") +  
  
  #Below functions add "$" infront of the axis labels
  scale_y_continuous(label = label_dollar()
                     ) + 
  
  scale_x_continuous(label = label_dollar()
                     ) +
  
  labs(
    title = "Relationship Between Median Household Income and Infant Childcare Prices",
    subtitle = "Full-Time Median Weekly Price for Infant Childcare",
    x = "Median Household Income (2018 dollars)",
    y = "",
    ) 

#For this question, I added the label_dollar() function as it would provide additonal context to the graph and was suggested by Professor Theobold.

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Lab 7 | Question 2

#| label: visual-of-missing-values-over-time

fish |> 
  
  #Make sure it is rows lacking wight data
  filter(is.na(weight)) |>
  
  #Alter into a usable distincter variable
  mutate(trip = as.factor(trip)) |>
  
  group_by(year, section, trip) |>
  
  summarise(Missing_Count = n(), .groups = "drop") |>


  ggplot(aes(x = section, y = Missing_Count, fill = trip)) +
  
  geom_bar(stat = "identity") +
  
  facet_wrap(~ year, ncol = 5) +
  
  labs(
    title = "Frequency of Missing Weight Values by Year, Section, and Trip",
    subtitle = "Count of Missing Values",
    x = "Section",
    y = "",
    fill = "Trip"
  ) +
  
  theme_bw(base_size = 8) +  
  
  theme(
    strip.text = element_text(size = 12),
    aspect.ratio = 0.6,
    panel.grid.major = element_blank()
  ) +
  
  scale_fill_manual(values = c("darkcyan", "cyan2"))

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

#Lab 4 | Quetion 6

#| label: recreate-plot

library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")


```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

#Lab 4 | Quetion 6

#| label: recreate-plot

library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

#Lab 4 | Quetion 6

#| label: recreate-plot

library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")


#I removed the tilting of the labels as to prevent the reader fro viewing the graph in an awkward way.
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

#Lab 4 | Quetion 6

#| label: recreate-plot

library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

#Lab 4 | Quetion 6

#| label: recreate-plot

library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")
```

-   I can use annotations
*The difference from the original code is the annotation linked to explaining that one of the species that we collected could have discrepancies due to the larger range of data along with the lower density as compared to the other species. *
```{r}
#| label: dvs-3-2

# Lab 2 | Question 16

#| label: rotated-boxplot

ggplot(data = surveys,
       mapping = aes(x = species, 
                     y = weight)
      ) + 
  
   geom_boxplot(alpha = 0) +
  geom_jitter(alpha = 0.1, 
              color = "steelblue"
              ) +
  annotate("text", 
            x = 6, 
            y = 150, 
            label = "*Note: Hispidus may be\nthe most volitaile sample", 
            color = "blue4", 
            size = 4, 
            hjust = 0
   ) +
  
labs(title = "Boxplots of the Weights of Various Species Located in Portal, Arizona.",
     y = "Weight (grams)",
     x = "",
     ) +

#http://www.sthda.com/english/wiki/ggplot2-rotate-a-graph-reverse-and-flip-the-plot

# This function will flip the axis of the graph.
coord_flip() 



```

-   I can be creative...

```{r}
#| label: dvs-3-3

#Lab 7 | Question 2

#| label: visual-of-missing-values-over-time

fish |> 
  
  #Make sure it is rows lacking wight data
  filter(is.na(weight)) |>
  
  #Alter into a usable distincter variable
  mutate(trip = as.factor(trip)) |>
  
  group_by(year, section, trip) |>
  
  summarise(Missing_Count = n(), .groups = "drop") |>


  ggplot(aes(x = section, y = Missing_Count, fill = trip)) +
  
  geom_bar(stat = "identity") +
  
  facet_wrap(~ year, ncol = 5) +
  
  labs(
    title = "Frequency of Missing Weight Values by Year, Section, and Trip",
    subtitle = "Count of Missing Values",
    x = "Section",
    y = "",
    fill = "Trip"
  ) +
  
  theme_bw(base_size = 8) +  
  
  theme(
    strip.text = element_text(size = 12),
    aspect.ratio = 0.6,
    panel.grid.major = element_blank()
  ) +
  
  scale_fill_manual(values = c("darkcyan", "cyan2"))

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

#Lab 3 | Question 6

#| label: unique-courses
# code chunk for Q5
#This could display the number of unique teacher and course IDs withing the dataset.
teacher_evals_clean |>
  summarise(Unique_Teachers = n_distinct(teacher_id),
            Unique_Courses = n_distinct(course_id)
            )
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

# Lab 7 | Question 1

#| label: find-missing-values

fish |>
  summarise(
    # Count missing values in each column
    across(everything(), ~ sum(is.na(.)))) |>

    pivot_longer(everything(), 
                 names_to = "Variable", 
                 values_to = "Missing_Values") |>
  
  # Determine the columns that have missing values. 
    filter(Missing_Values > 0)

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

#Lab 3 | Question 9

#| label: question-1-high-low
# code chunk for Q9

#This code chunk will print out the list of professors that have the highest average 
#and lowest SET score for question 1 in ascending order. 
teacher_evals_clean |>
  
  filter(question_no == 901) |>
  
  group_by(teacher_id) |>
  
  summarize(avg_rating = mean(SET_score_avg)) |>
  
  filter(avg_rating == max(avg_rating) | avg_rating == min(avg_rating)) |>
  
  arrange(avg_rating)


```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 8 | Question 3

#| label: double-pivot-for-summary-table

evals |>
  #Make sure to get all the distinct teachers once, along with other variabels.
  distinct(teacher_id, 
           sex, 
           seniority, 
           academic_degree) |>
  
  #Create a new column to distinguish junior and senior professors.
  mutate(seniority_category = ifelse(seniority <= 4, 
                                     "junior", 
                                     "senior")) |>
  #Take the needed variables and order them to be associated to a unique professor
  pivot_longer(cols = c(sex, 
                        seniority_category, 
                        academic_degree),
              names_to = "category_type",
              values_to = "category") |>

  group_by(category) |>
  #Count the number of each varible
  summarize(total = n(), .groups = "drop") |>
  
  pivot_wider(
    names_from = category,
    values_from = total
  ) |>
  #Frame the column header to share the original table
  select(
    Female = female,
    Male = male,
    `Junior (4 years or less)` = junior,
    `Senior (more than 4 years)` = senior,
    `No Degree` = no_dgr,
    Masters = ma,
    Doctorate = dr,
    Professor = prof
  ) |>
  
  kable() |>

  #https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html
  kable_styling(bootstrap_options = c("hover"))


```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

#Lab 4 | Question 4

#| label: median-income-by-region-over-time

ca_childcare |>
  
  filter(study_year %in% c(2008, 
                           2018)
         ) |>             
  group_by(Region, 
           study_year) |> 
  
  #Take the median of household income from both years and compare them 
  summarize(median_income = median(mhi_2018, 
                                   na.rm = TRUE), 
            .groups = "drop") |>

  arrange(median_income) |>
  
  pivot_wider(names_from = study_year,                  
              values_from = median_income) |>
  
  rename(Med_Income_2008 = "2008",
         Med_Income_2018 = "2018") 

```

-   Example 2

```{r}
#| label: dvs-6-2


# Lab 8 | Question 3

#| label: double-pivot-for-summary-table

evals |>
  #Make sure to get all the distinct teachers once, along with other variabels.
  distinct(teacher_id, 
           sex, 
           seniority, 
           academic_degree) |>
  #Create a new column to distinguish junior and senior professors.
  mutate(seniority_category = ifelse(seniority <= 4, 
                                     "junior", 
                                     "senior")) |>
  #Take the needed variables and order them to be associated to a unique professor
  pivot_longer(cols = c(sex, 
                        seniority_category, 
                        academic_degree),
              names_to = "category_type",
              values_to = "category") |>

  group_by(category) |>
  #Count the number of each varible
  summarize(total = n(), .groups = "drop") |>
  
  pivot_wider(
    names_from = category,
    values_from = total
  ) |>
  #Frame the column header to share the original table
  select(
    Female = female,
    Male = male,
    `Junior (4 years or less)` = junior,
    `Senior (more than 4 years)` = senior,
    `No Degree` = no_dgr,
    Masters = ma,
    Doctorate = dr,
    Professor = prof
  ) |>
  
  kable() |>

  #https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html
  kable_styling(bootstrap_options = c("hover"))


```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

#Lab 9 | Question 7

#| label: table-of-simulated Means
all_simulations |>
  group_by(n) |>
  summarize(
    mean_of_simulated_means = mean(simulated_means),
    .groups = "drop"
  ) |>
  rename(
    `Sample Size (n)` = n,
    `Mean of Simulated Means` = mean_of_simulated_means
  ) |>
  
  gt() |>
    tab_header(
      title = "Summary of Simulated Means",
      subtitle = "Exploring the Means of Simulated Chi-Squared Distributions"
    )|>
  
  #Format numbers within the column to specific decimal points
    fmt_number(
      columns = `Mean of Simulated Means`,
      decimals = 2
    ) |>
    tab_style(
      style = cell_text(font = "Arial", weight = "bold", size = px(14)),
      locations = cells_column_labels()
    ) |>
    opt_row_striping()

```

-   Example 2

```{r}
#| label: dvs-7-2

# Lab 9 | Question 2

#| label: table-for-random-babies

results_df <- enframe(results,
                      name = "simulation_number",
                      value = "ncorrect") |>
  count(ncorrect) |>
  mutate(proportion = n / sum(n)) |>
  select(ncorrect, proportion) |>
  
  pivot_wider(names_from = ncorrect, 
              values_from = proportion, 
              names_prefix = "correct_")

results_df |>
  gt() |>
  tab_header(
    title = "Percentage of Correctly Returned Babies",
    subtitle = "Based on 10,000 Random Simulations"
  ) |>
  fmt_percent(
    columns = everything(), # Format all columns
    decimals = 2 # Display percentages with two decimal places
  ) |>
  cols_label(
    correct_0 = "0 Correct",
    correct_1 = "1 Correct",
    correct_2 = "2 Correct",
    correct_4 = "All Correct"
  )

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

#Lab 5 |

#| label: inspecting-crime-scene-report

crime_scene_report |>
  
  mutate(date = ymd(date)) |>
  
  filter(date == mdy("January 15, 2018"), 
           city == "SQL City",
           type == as.factor("murder")) |>
  
  select(description)


```

-   `across()`

```{r}
#| label: pe-1-across

# Lab 7 | Question 8

#| label: rescale-data-frame-function

rescale_column <- function(df, columns) {
  
  #Added to check if the df is really a dataframe
  stopifnot(is.data.frame(df))
 
  df <- df |> 
    mutate(across({{columns}}, rescale_01))
  
  return(df)
}

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

# Lab 8 | Question 1

#| label: map-data-types-of-surveys

#Generate a table of the variables in the survey dataset and their variable type
bind_rows(map_chr(surveys, typeof))

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

# Lab 7 Challenge | Question 2

#| label: function-to-change-impossible-measurements-to-NA

replace_unlikely_values <- function(measurements, min_value, max_value) {
  
  
  #Determine if input values fit between the min and max values
  if(!is.numeric(measurements) || !is.numeric(min_value) || !is.numeric(max_value)) {
    stop("All inputs must be Numeric")
  }
                 
  case_when(measurements < min_value ~ NA_real_,
            measurements > max_value ~ NA_real_,
            .default = measurements)

  
}

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

# Lab 7 | Question 8

#| label: rescale-data-frame-function

rescale_column <- function(df, columns) {
  
  #Added to check if the df is really a dataframe
  stopifnot(is.data.frame(df))
 
  df <- df |> 
    mutate(across({{columns}}, rescale_01))
  
  return(df)
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

# Lab 7 | Question 8

#| label: rescale-data-frame-function

rescale_column <- function(df, columns) {
  
  #Added to check if the df is really a dataframe
  stopifnot(is.data.frame(df))
 
  df <- df |> 
    mutate(across({{columns}}, rescale_01))
  
  return(df)
}

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

# Lab 8 | Question 4

#| label: map-missing-values-of-fish

fish |>
  map_int(~sum(is.na(.x))) |>
  
  kable(col.names = c("Variable Name", "Number of Missing Values")) |>

  kable_styling(bootstrap_options = c("responsive"))

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

# Lab 9 | Question 6

all_simulations <- grid |> 
  mutate(simulated_means = pmap(.l = list(n = n, df = df), 
                                .f = simulate_means)
         ) |> 
  unnest(simulated_means) 

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1 

#Lab 8 | Question 2

#| label: map-to-mutate-columns

#Apply the as.factor function to the desired variables and back into a data frame. 
evals_factored <- evals |>
  mutate(across(c(teacher_id, weekday, academic_degree, seniority, sex), as.factor)) |>
  bind_cols()

str(evals_factored)

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

#Lab 4 | Question 6


library(RColorBrewer)

ca_childcare |>
  
  select(Region, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool
         ) |> 
  
  #Rename columns to prevent copying of columns
  rename(Infant = mc_infant, 
         Toddler = mc_toddler, 
         Preschool = mc_preschool
         ) |> 

  group_by(study_year, 
           Region
           ) |>
  
  pivot_longer(cols = Infant:Preschool,
               names_to = "Child_Age",
               values_to = "Median_Price"
               ) |>
  
  mutate(Child_Age = fct_relevel(Child_Age,
                                   "Infant",
                                   "Toddler",
                                   "Preschool")
    ) |>
  

  ggplot(mapping = aes(x = study_year,
                       y = `Median_Price`,
                       color = fct_reorder2(.f = Region, 
                                            .x = study_year, 
                                            .y = Median_Price)
                       )
         ) +
    
    geom_point(size = 1) +
    
    facet_wrap(~ `Child_Age`) +
    
    geom_smooth(linewidth = 0.8) +
    
    scale_x_continuous(breaks = seq(2008, 
                                    2018,
                                    by = 2)
                       ) +
    
    scale_y_continuous(limits = c(100,500),
                       breaks = seq(100, 
                                    500, 
                                    by = 100)
                       ) +
      
    theme_light() +
    
    #https://stackoverflow.com/questions/26894534/howto-automatically-set-fixed-coordinate-ratio-coord-fixed-when-x-and-y-axis
      theme(
        axis.text.x = element_text(size = 6, hjust = 0.5), 
        axis.text.y = element_text(size = 6, hjust = 2),
        plot.title = element_text(size = 10, vjust = 10),
        strip.text = element_text(size = 8),   
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.8, "lines"),
        aspect.ratio = 1.1,
        ) +
  
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  
  labs(x = "Study Year",
       y = "",
       subtitle = "Weekly Median Price for Center-Based Childcare ($)",
       colour = "California Region")

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

#Lab 9  | Question 1

#| label: function-simulation-for-random-babies

randomBabies <- function(nBabies){
  assigned <- sample(1:nBabies, nBabies, replace = FALSE)
  
  # Count how many are correctly returned (match original positions)
  sum(assigned == 1:nBabies)
}

results <- map_int(.x = 1:10000,
                   .f = ~ randomBabies(4)
                   )

```

-   Example 2

```{r}
#| label: dsm-1-2

#Lab 9 | Question 4

simulate_means <- function(n, df){
  map_dbl(.x = 1:n, 
          .f = ~rchisq(n = 100, df = df) %>% mean()
          )
}

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#Lab 4 | Question 8

reg_mod1 <- lm(mc_infant ~ mhi_2018, 
               data = ca_childcare)

summary(reg_mod1)

```

-   Example 2

```{r}
#| label: dsm-2-2

#Lab 2 | Question 17

#| label: anova

species_mod <- aov(weight ~ species, data = surveys)

summary(species_mod)

```

## Revising My Thinking

This assignment has given me an opportunity to look over my code and understand where I am at as an R practitioner, and I would say that I have made a lot of progress since September and I am proud of my progress. Although I'm still learning, I believe I have built a solid foundation that will be of use for years to come. When looking through my older works, there were areas that I could have easily improved by altering the code to take on new functions or operations to achieve my answer. Of course, there are aspects that I need to work on, as there are functions that we have learned, but I have not fully unitlized as I have been uncomfortable with them as compared to other functions. Some of these functions include across(), semi_join(), and anti_join(). These could also bleed into the map functions, which are still a little unclear to me, but will require more practice for me to gain a better understanding. 

## Extending My Thinking

One surprising aspect that I believed helped me grow and will continue to help me grow is the idea of making errors. The best way to learn is fail, which is very true but, often with failure, we have to deal with the consequences, often being lower grades. This class has offered me the ability to gain feedback and understand what I did wrong or what I can do better. Looking through my projects, I made the adjustments that I needed to in the code that would raise the floor of my grade, however, there are still aspects that I need to focus on that would benefit strengthen my ability to use R in the facets that I hope to use. I just need to be better with using the tools that make my life easier, and not be comfortable with the tools that I am comfortable with and make complicated code that could be done much more efficiently. 

## Peer Support & Collaboration

Initially, I had a difficult time of understanding how to review the code of other student's. In my mind, I found all of their code exemplary but, I understood that I had to be critical to a certain extent, as good code can always become great code. Commonly this would be the structuring of code, to be formatted in a more readable manner or functions could be replaced with one that could achieve multiple steps in one, making the overall chunk much more concise. I did my best to balance in compliments of the code, such as design and structure of the code, as those are often up to par. There have been times that the coder did not use a lot of effort, such as the labs which required us to make tables, and so I had to try to be a bit harsher on the criticism. 

In regards to by weekly pair activities, I believe that we did a great job. At first I did not enjoy the aspect that one could not just write their thoughts out but, this helped in streamlining the thinking, similar to the rubber ducky method however the duck can talk and contribute. Over time we got better at allowing one person to work their way though the problem while one focused on making the code look good. The switching also took some getting used to as when we were in the zone, we did not want to be interrupted, but this forced us to be flexible and learn how to do both jobs of developer and coder.
=======
